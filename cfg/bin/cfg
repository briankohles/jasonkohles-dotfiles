#!/usr/bin/env bash
###################
# Copyright 2019 Jason Kohles <email@jasonkohles.com>
# MIT Licensed
# https://github.com/jasonk/dotfiles
####################
set -euo pipefail

warn() { echo "$@" 1>&2; }
die() { warn "$@"; exit 1; }

export GIT_DIR="$HOME/.cfg"
export CFG_DIR="$HOME/cfg"
export BIN_DIR="$HOME/bin"
export GIT_WORK_TREE="$HOME"

export PATH="$CFG_DIR/bin:$PATH"

if [ -f "$CFG_DIR/cfg-env.sh" ]; then . "$CFG_DIR/cfg-env.sh"; fi
usage() {
  exec 1>&2
cat <<'END'
Usage: cfg <command> [args]

This tool is really just a thin wrapper around 'git'.  It provides
some configuration and some additional commands.  Any commands not
listed here will be passed directly to 'git', so you manage your
dotfiles in the repo with 'cfg add', 'cfg commit', 'cfg push', 'cfg
pull', etc.

END
  sed -n 's/^#$# /cfg /p' "$CFG_DIR"/{bin,commands}/* |
    awk '{gsub(" -- ","\t", $0); print }' |
    column -t -s$'\t'
  exit 1
}

if ! (( $# )); then usage; fi

CMD="$1" ; shift
if [ -f "$CFG_DIR/commands/$CMD.sh" ]; then
  source "$CFG_DIR/commands/$CMD.sh";
elif command -v "cfg-$CMD" &>/dev/null; then
  exec "cfg-$CMD" "$@";
else
  case "$CMD" in
    ""|help|--help|-h) usage ;;
    *) git "$CMD" "$@" ;;
  esac
fi
