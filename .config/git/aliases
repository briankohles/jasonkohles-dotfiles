# vim:syntax=gitconfig
[alias]
b = branch
recent = branch --sort=committerdate
c = checkout
co = commit
up = !git commit -am updates && git push origin
d = diff -b
dc = diff -b --cached
ds = diff -b --stat
s = status
# summary of what is about to be pushed
ps = log --pretty=oneline @{u}..
# like "git log", but include the diffs
w = whatchanged -p
# changes since we last did a push
wo = whatchanged -p origin..
wu = whatchanged -p origin..
pushtags = push origin --tags
pushnotes = push origin refs/notes/*

fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
ri = rebase --interactive --autosquash
rbu = !git fetch upstream && git rebase upstream/$(git mainu) --autostash --no-edit
rsu = !git reset upstream/$(git mainu)
rbo = !git fetch origin && git rebase origin/$(git maino) --autostash --no-edit
rso = !git reset origin/$(git maino)
mu = !git fetch upstream && git merge upstream/$(git mainu) --autostash --no-edit
mo = !git fetch origin && git merge origin/$(git maino) --autostash --no-edit
wdiff = diff --color-words
ignore = update-index --assume-unchanged
unignore = update-index --no-assume-unchanged
showignore = !git ls-files -v | grep '^h'
lsu = ls-files --unmerged
ls-unmerged = !git lsu | cut -f2 | sort -u
edit-unmerged = !$EDITOR $(git lsu | cut -f2 | sort -u)
eu = edit-unmerged
add-unmerged = !$EDITOR $(git lsu | cut -f2 | sort -u)
au = add-unmerged
prune-all = !git remote | xargs -n 1 git remote prune

# upstream-name = find the name of the upstream branch
# This only works because my standard is to use `origin` for my own
# repos, and `uptream` for the upstream repo.  In the case where it's
# one of my projects and there is no upstream then I only have `origin`.
# In the case where there are both, it ends up with upstream just because
# it gets sorted last.
upstream-name = !git remote | grep -Eo '^(origin|upstream) ' | sort | tail -1

# main = Show the name of the HEAD branch for the repo (usually
# `main` or `master`)
maino = !git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4
mainu = !git symbolic-ref refs/remotes/upstream/HEAD | cut -d'/' -f4

# lc = See what commits we got in the last fetch
lc = log ORIG_HEAD.. --stat --no-merges

# llog = Just like 'git log' but with localized timestamps
llog = log --date=local

# Run gitk for conflict resolution
gitkconflict = !gitk --left-right HEAD..MERGE_HEAD

history = log --text --follow -p --
ages = !git for-each-ref --sort=-committerdate refs/heads --color=always --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' | column -ts'|'
jenkins-pr-url = !gh pr checks | xargs -n1 | grep -E 'https?://jenkins' | sed 's%/display/redirect%%'
jenkins-pr-log-url = !echo "$(git jenkins-pr-url)/consoleFull"
jenkins-pr-log-text-url = !echo "$(git jenkins-pr-url)/consoleText"
jenkins-pr-log = !open "$(git jenkins-pr-log-url)"
jenkins-pr-log-only = !open "$(git jenkins-pr-log-text-url)"
