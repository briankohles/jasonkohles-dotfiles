#!/usr/bin/env python3

import os, pwd
from pathlib import Path
from rich.pretty import pprint
from subprocess import run as _run

USER = pwd.getpwuid( os.getuid() )[0]
VIM_DIR = Path.home() / '.vim'
PACKS_DIR = VIM_DIR / 'pack' / USER / 'start'
PLUGINS_DIR = VIM_DIR / 'plugins'
PLUGINS: set[str] = set()

PACKS_DIR.mkdir( parents = True, exist_ok = True )
PACKS: set[str] = set()
REPOS: set[str] = set()
REPO_DIRS: set[Path] = set()

def run( *args, **kwargs ):
    kwargs.setdefault( 'check', True )
    return _run( args, **kwargs )

def update_repo(
    url: str, repo_dir: Path, *,
    branch: str | None = None,
    depth: int | None = None,
    **_,
):
    repo_dir.parent.mkdir( parents = True, exist_ok = True )
    if repo_dir.is_dir():
        if branch: run( 'git', 'checkout', branch, cwd = repo_dir )
        run( 'git', 'pull', '--ff-only', '--no-rebase', cwd = repo_dir )
    else:
        args = []
        if branch: args += [ '-b', branch ]
        if depth: args += [ '--depth', depth ]
        run( 'git', 'clone', *args, url, str( repo_dir ) )

def process_plugin( file: Path ):

    name = file.stem

    for line in file.read_text().splitlines():
        if not line.startswith( '" ' ): return
        line = line.lstrip( '" ' )
        if not len( line ): continue
        cmd, args = line.split( ' ', 1 )
        cmd = cmd.lower().strip()
        args = args.strip( "' " )
        print( cmd, args )
        if cmd == 'disabled': continue
        if cmd == 'plugin':
            PLUGINS.add( name )
            repo, *parts = args.split( ' ' )
            repo = repo.strip( "' " )
            opts = {}
            for part in parts:
                l, r = part.split( '=', 1 )
                opts[ l ] = r
            pack_name = opts.get( 'name', Path( repo ).stem )
            pack_dir = PACKS_DIR / pack_name
            PACKS.add( pack_name )
            url = 'https://github.com/' + repo
            if subdir := opts.pop( 'directory', None ):
                repo_dir = VIM_DIR / 'repos' / name
                update_repo( url, repo_dir, **opts )
                run(
                    'rsync', '-avPH', '--delete',
                    str( repo_dir / subdir ) + '/',
                    str( pack_dir ) + '/',
                )
            else:
                update_repo( url, pack_dir, **opts )
        elif cmd == 'postinstall':
            print( f'Running postinstall for {name} in {pack_dir}' )
            run( 'bash', '-c', args, cwd = pack_dir )
        else:
            print( 'Unknown command:', line )

for file in PLUGINS_DIR.iterdir():
    if not file.is_file(): continue
    if file.suffix != '.vim': continue
    process_plugin( file )

for subdir in PACKS_DIR.iterdir():
    if subdir not in PACKS:
        run( 'rm', '-rf', str( subdir ) )

( VIM_DIR / 'plugins.vim' ).write_text( '\n'.join( [
    '" Do not edit this file!  It is generated by ~/.vim/setup',
    *[ f'source ~/.vim/plugins/{plugin}.vim' for plugin in sorted( PLUGINS ) ]
] ) )
