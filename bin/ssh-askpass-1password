#!/bin/bash
# An SSH_ASKPASS helper that gets ssh passwords from 1password.

# To prepare your shell to use this:
#  export SSH_ASKPASS=ssh-askpass-1password
#  export SSH_ASKPASS_REQUIRE=force

# To prepare your 1password vault to use this:
#   For this to find your password, the item in your 1password vault
#   must meet all of these critieria:
#     * The item must be of type "Login"
#     * The item must be tagged with "ssh"
#     * The username must match one of the usernames that this script
#       will produce (see below)
#
# If you run this script manually, with no arguments, it will list all
# the items in your vault that meet these criteria.

# Username lookup:
# * When SSH calls this script, it passes it a "prompt" string that
#   looks like "username@hostname's password: ".
# * To find a password for this connection, this script produces some
#   permutations of that format, and searches for them in 1password.
#
# The permutation process is:
#   * Strip off everything after the "'s" (including the "'s")
#   * While the string contains one or more "@"s:
#   * Add the current string to the list
#   * Strip off the last "@" and everything that follows it
#   * Add the remaining string to the list.
#
# For example, if I'm connecting to 192.168.10.10 as the user "me@mydomain"
# then the prompt passed to this script will look like this:
#   me@mydomain@192.168.10.10's password:
# And the permutations that this script will lookup will be:
#   me@mydomain@192.168.10.10
#   me@mydomain
#   me

if [ -n "${SSH_ASKPASS_DEBUG:-}" ]; then
  exec 2>/tmp/ssh-askpass-1password.log
  # set -x
else
  exec 2>/dev/null
fi
debug() { echo "$@" >&2; }

get-items() {
  op item list --categories LOGIN --tags ssh --format=json | jq -c '.[]'
}

if (( $# )); then
  target="${1%\'*}"
else
  get-items |
    jq -r '[.title,.additional_information] | @tsv' |
    column -ts $'\t'
  exit
fi

DATA="$(get-items)"
targets=()
while [ -n "$target" ]; do
  targets+=( "$target" )
  if [[ $target == *@* ]]; then
    target="${target%@*}"
  else
    target=""
  fi
done

for target in "${targets[@]}"; do
  debug "target = $target"
  res="$(jq -c --arg TGT "$target" '
    select( .additional_information == $TGT ) // empty
  ' <<< "$DATA" | head -n 1)"
  if [ -z "$res" ]; then continue; fi
  id="$(jq -r .id <<<"$res")"
  if [ -z "$id" ]; then continue; fi
  # shellcheck disable=SC2093
  exec op item get "$id" --fields label=password
done
